[{"id":0,"href":"/docs/developer/roadmap/","title":"Roadmap","section":"Docs","content":"Roadmap #  First roadmap ðŸŽ‰\nThis document outlines some goals, non-goals, and future aspirations for Ferry as a project.\n Requirements\n Authentication between Tunnels #36  "},{"id":1,"href":"/docs/user/join-mode/","title":"Join Mode","section":"Docs","content":"TODO\n"},{"id":2,"href":"/docs/user/quick-start/","title":"Quick Start","section":"Docs","content":"Quick Start #  Prepare at least two clusters for demonstration\nCan be a cluster of one node or a cluster of Kind but at least two.\n Download ferryctl #  ferryctl is the installation and operation tool for ferry\nA ferryctl needs to be installed for each cluster\u0026rsquo;s control node\n https://github.com/ferry-proxy/ferry/releases\nInitialize control plane #  # execute on control plane ferryctl control-plane init Declares to the control plane which data plane needs to join #  # execute on control plane to pre join other data plane ferryctl control-plane join cluster-1 If the network environment is more complex, please refer to Join Mode\nData plane is ready to be managed by control plane #  After the last command is executed of control plane, it responds with a command, copied to data plane to run.\nControl plane begins to control data plane #  After the last command is executed of data plane, it responds with a command, copied to the control plane to run.\nConfiguration rules #  The test application needs to deploy and configure the Service\nRules for configuring Ferry on the control plane cluster\n# Mapping app-1.default.svc of cluster-1 to the app-1.default.svc of control-plane apiVersion: traffic.ferry.zsm.io/v1alpha2 kind: RoutePolicy metadata: name: ferry-rule namespace: ferry-system spec: exports: - hubName: cluster-1 service: namespace: default name: app-1 imports: - hubName: control-plane service: namespace: default name: app-1 "}]