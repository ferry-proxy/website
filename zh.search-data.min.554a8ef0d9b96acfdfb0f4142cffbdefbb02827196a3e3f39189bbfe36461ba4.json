[{"id":0,"href":"/zh/docs/developer/roadmap/","title":"Roadmap","section":"Docs","content":"Roadmap #  本文概述了Ferry作为一个项目的一些目标、非目标和未来的期望。   Engage encryption Use Ferryctl alone to configure service mapping between clusters without the Controller Status is monitored and displayed in the status of the Hub Multi-cluster failover Multi-cluster load balancing IP-based access control Provide an cluster-to-cluster view of traffic flow and service performance  "},{"id":1,"href":"/zh/docs/user/join-mode/","title":"Join Mode","section":"Docs","content":"TODO\n"},{"id":2,"href":"/zh/docs/user/quick-start/","title":"Quick Start","section":"Docs","content":"快速开始 #  准备至少两个集群才能做演示\n可以是一个节点的集群或者 Kind 起的集群但最少也要两个\n 下载 ferryctl #  ferryctl 是 ferry 的安装运维工具\n需要为每个集群的控制节点都安装一个 ferryctl\n https://github.com/ferryproxy/ferry/releases\n初始化控制面集群 #  # 在控制面集群执行 ferryctl control-plane init 向控制面声明哪个数据面需要加入 #  # 在控制平面执行，预连接其他数据平面 ferryctl control-plane join cluster-1 如果网络环境较为复杂请参考 加入模式\n数据面做好被控制面管控的准备 #  上一个命令执行后, 会响应一个命令复制到数据面集群执行\n控制面开始管控数据面 #  上一个命令执行后, 会响应一个命令复制到控制面集群执行\n规则配置 #  测试应用需要提前部署并配置 Service\n在控制面集群配置路由规则\n# 映射 cluster-1 的 app-1.default.svc 映射到 control-plane 的 app-1.default.svc apiVersion: traffic.ferryproxy.io/v1alpha2 kind: RoutePolicy metadata: name: ferry-rule namespace: ferry-system spec: exports: - hubName: cluster-1 service: namespace: default name: app-1 imports: - hubName: control-plane service: namespace: default name: app-1 "}]